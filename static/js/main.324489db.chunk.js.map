{"version":3,"sources":["Home.js","Album.js","App.js","serviceWorker.js","index.js"],"names":["Home","src","Component","mystyle","color","cursor","Album","getTrackUrl","id","fetch","then","res","json","url","setState","state","trackdata","map","track","tracks","this","i","key","data","onClick","React","TableRow","props","artist","style","title","onContextMenu","controls","autobuffer","onPlay","type","App","basename","process","BASENAME","className","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kRAiBeA,E,uKAbP,OAEI,6BAEI,yBAAKC,IAAI,+CACT,yD,GAPGC,a,eCEbC,G,MAAU,CACZC,MAAO,OACPC,OAAQ,YAGNC,E,kDAEF,aAAe,IAAD,8BACV,gBAOJC,YAAa,SAACC,GAEVC,MAAM,gFAAD,OAAiFD,IACjFE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,YAAc,IAAXG,EAAU,EAAVA,IACL,EAAKC,UAAS,SAAAC,GAOV,MAAO,CAAEC,UALUD,EAAMC,UAAUC,KAAK,SAAAC,GACpC,OAAOA,EAAMV,KAAOA,EAAb,eAAuBU,EAAvB,CAA8BL,QAAQK,aAd7D,EAAKH,MAAQ,CACTC,UAAW,MAHL,E,gEA6BO,IAAD,OAChBP,MAAM,wEACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,YAAiB,IAAdS,EAAa,EAAbA,OACL,EAAKL,SAAS,CAAEE,UAAWG,S,+BAK7B,IAAD,OACL,OAAKC,KAAKL,MAAMC,UAKZ,6BACI,0DACA,+BACI,+BACA,4BACI,kCACA,sCACA,qCACA,qCAGJ,+BACEI,KAAKL,MAAMC,UAAUC,KAAI,SAACC,EAAOG,GAAR,OACvB,kBAAC,EAAD,CACIC,IAAOD,EACPE,KAAQL,EACRM,QAAW,EAAKjB,oBApBzB,+C,GA1CCkB,IAAMvB,WAwEpBwB,EAAW,SAAAC,GAAU,IAAD,EAGtB,OAEI,wBAAKH,QAAW,kBAAMG,EAAMH,QAAQG,EAAMJ,KAAKf,MAC3C,4BAAKmB,EAAMJ,KAAKf,GAAhB,QACA,4BAAKmB,EAAMJ,KAAKK,OAAhB,QACA,wBAAIC,MAAO1B,GAAUwB,EAAMJ,KAAKO,MAAhC,mBAGA,4BAAKH,EAAMJ,KAAKV,KAAQ,8BAAOkB,cAAc,gBAAgBC,UAAQ,EAACC,YAAU,EAACC,OAAO,iBAAhE,0DACoB,+BADpB,GAEpB,4BAAQjC,IAAM0B,EAAMJ,KAAKV,IAAKsB,KAAK,kBAQpC7B,ICtEA8B,E,uKAxBP,OACI,kBAAC,IAAD,CAAQC,SAAUC,4HAAYC,UAC1B,6BACI,gDACA,yBAAKC,UAAU,iDACX,wBAAIA,UAAU,sBACV,4BAAI,kBAAC,IAAD,CAAMC,GAAI,IAAKD,UAAU,YAAzB,WACJ,4BAAI,kBAAC,IAAD,CAAMC,GAAI,SAAUD,UAAU,YAA9B,YAKZ,6BACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,IAAIC,UAAW5C,IAEjC,kBAAC,IAAD,CAAO2C,KAAK,SAASC,UAAWtC,W,GAlBtCJ,aCME2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.324489db.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Home extends Component {\n    render() {\n        return (\n\n            <div>\n\n                <img src=\"https://waylostreams.live/waylostreams.jpg\"></img>\n                <h2>This is Waylostreams</h2>\n            </div>\n\n\n        );\n    }\n}\n\nexport default Home;\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport './App.css';\n\nconst mystyle = {\n    color: \"blue\",\n    cursor: \"pointer\"\n};\n\nclass Album extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            trackdata: null\n        }\n\n    }\n\n    getTrackUrl= (id) => {\n\n        fetch(`https://qmlx4jv1uj.execute-api.us-west-2.amazonaws.com/latest/track?track_id=${id}`)\n            .then(res => res.json())\n            .then(({ url }) => {\n                this.setState(state => {\n                    /** newTracks returns a new array of tracks with one with an updated URL **/\n                    const newTracks =  state.trackdata.map( track => {\n                        return track.id === id ? { ...track, url } : track\n\n                    })\n                    /** return an updated state with url added to trackdata of track **/\n                    return { trackdata:newTracks}\n\n\n                })\n            })\n    }\n\n\n\n    componentDidMount() {\n        fetch('https://qmlx4jv1uj.execute-api.us-west-2.amazonaws.com/latest/tracks')\n            .then(res => res.json())\n            .then(({ tracks }) => {\n                this.setState({ trackdata: tracks })\n            })\n\n    }\n\n    render() {\n        if (!this.state.trackdata) {\n            return <p>loading ....</p>\n        }\n\n        return (\n            <div>\n                <h1>Welcome to Waylostreams...</h1>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Artist</th>\n                        <th>Title</th>\n                        <th>URL</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    { this.state.trackdata.map((track, i) => (\n                        <TableRow\n                            key = {i}\n                            data = {track}\n                            onClick = {this.getTrackUrl}\n                        />\n                    ))}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nconst TableRow = props => {\n\n\n    return (\n\n        <tr  onClick = {() => props.onClick(props.data.id)}  >\n            <td>{props.data.id}:  :</td>\n            <td>{props.data.artist}:  :</td>\n            <td style={mystyle}>{props.data.title}\n             : Click to play</td>\n\n            <td>{props.data.url && (<audio onContextMenu=\"return false;\" controls autobuffer onPlay=\"log_stream1()\" controls\n                                           controlsList=\"nodownload noremoteplayback\">\n                <source src= {props.data.url} type=\"audio/mp3\"></source>\n            </audio>) }</td>\n        < /tr>\n    );\n}\n\n\n\nexport default Album;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Home from './Home';\nimport Album from './Album';\n\n\nclass App extends Component {\n    render() {\n        return (\n            <Router basename={process.env.BASENAME}>\n                <div>\n                    <h2>WAYLOSTREAMS.COM</h2>\n                    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                        <ul className=\"navbar-nav mr-auto\">\n                            <li><Link to={'/'} className=\"nav-link\"> Home </Link></li>\n                            <li><Link to={'/Album'} className=\"nav-link\">Album</Link></li>\n\n\n                        </ul>\n                    </nav>\n                    <hr />\n                    <Switch>\n                        <Route exact path='/' component={Home} />\n\n                        <Route path='/Album' component={Album} />\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}